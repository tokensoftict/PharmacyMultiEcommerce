<?php
namespace App\Traits;

use App\Classes\ApplicationEnvironment;
use App\Classes\Settings;
use App\Models\Address;
use App\Models\DeliveryTownDistance;
use App\Models\PromotionItem;
use App\Models\Stock;
use App\Models\WholesalesUser;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Carbon;

trait StockModelTrait
{

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        if(!app()->runningInConsole()){
            static::addGlobalScope("filter_stocks", function (Builder $builder){
                $builder->with([ApplicationEnvironment::$stock_model_string])
                    ->whereHas(ApplicationEnvironment::$stock_model_string);
            });
        }
    }

    public final function getProductImageAttribute() : string
    {
       if($this->stock_media) return $this->stock_media->media->getFullUrl();

        return asset("logo/no-image.png");
    }


    public final function getDoorstepAttribute() : int|bool
    {
        $product_size = 1;

        $applicationUser = getApplicationModel();

        if(!$applicationUser instanceof WholesalesUser) return false;

        if($this->stock_sizes)  $product_size = $this->stock_sizes->product_size;

        $deliveryTariff = app(Settings::class)->get("delivery_tariff");


        if(!$applicationUser) return false;

        //check if user as selected an address for checking out before

        $checkout_selected_address  = $applicationUser->checkout;

        if(isset($checkout_selected_address->deliveryAddressId))
        {
            $applicationUser->address_id = $checkout_selected_address->deliveryAddressId;
        }

        if($applicationUser->address_id == NULL) return false;

        $address = Address::with('town')->find($applicationUser->address_id);

        if($address->town_id == NULL) return  false;

        $door_step_down_distance = DeliveryTownDistance::where('town_id',$address->town_id)->first();

        if(!$door_step_down_distance) return  false;

        return (($product_size * $door_step_down_distance->town_distance) * $deliveryTariff);
    }



    public function promotion_item()
    {
        return $this->hasOne(PromotionItem::class)->ofMany(['id' => 'MAX'], function ($query) {
            $query->where("status_id", status("Approved"))
                ->where("app_id", ApplicationEnvironment::$id)
                ->whereNull('customer_group_id')
                ->whereNull('customer_type_id')
                ->where(function($q) use(&$now){
                    $q->whereDate('from_date','<=', \Illuminate\Support\Carbon::now());
                    $q->whereDate('end_date',">=", \Carbon\Carbon::now());
                });
        });
    }

    /**
     * @return int|float|bool
     */
    public final function getSpecialAttribute() : int|float|bool
    {
       $promotion = $this->hasOne(PromotionItem::class)->ofMany(['id' => 'MAX'], function ($query) {
            $query->where("status_id", status("Approved"))
                ->where("app_id", ApplicationEnvironment::$id)
                ->whereNull('customer_group_id')
                ->whereNull('customer_type_id')
                ->where(function($q) use(&$now){
                    $q->whereDate('from_date','<=',Carbon::now());
                    $q->whereDate('end_date',">=",Carbon::now());
                });
        })->first();

       if(!$promotion) return false;
       return $promotion->price;
    }
}
